name: CD - Deploy Doctor Appointment Backend

on:
  push:
    branches: [ master, develop, feature/** ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Run tests
        run: ./mvnw -B test
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ BUILD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build-backend:
    needs: unit-tests
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    outputs:
      tag: ${{ steps.build.outputs.tag }}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: build
        name: Build & push multi-arch image
        run: |
          chmod +x ci/build-publish.sh
          ./ci/build-publish.sh "$ENVIRONMENT"  

  deploy-ec2:
    needs: build-backend
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Update tag & restart backend
        uses: appleboy/ssh-action@v0.1.10
        env:
          COMPOSE_PROJECT_NAME: doctorapp
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            ENV_FILE=/home/ubuntu/.env
            NEW_TAG="${{ needs.build-backend.outputs.tag }}"

            echo "ðŸ”„  Set API_TAG=$NEW_TAG"
            if grep -q '^API_TAG=' "$ENV_FILE"; then
              sudo sed -i "s/^API_TAG=.*/API_TAG=$NEW_TAG/" "$ENV_FILE"
            else
              echo "API_TAG=$NEW_TAG" | sudo tee -a "$ENV_FILE"
            fi

            echo "ðŸš¢  Pull & restart backend"
            sudo docker compose -f /home/ubuntu/docker-compose.yaml pull service
            sudo docker compose -f /home/ubuntu/docker-compose.yaml up -d --no-deps service